import java.util.*;
import java.io.*;
import java.lang.reflect.Array;
import java.lang.Comparable.*;
enum N
{
    OldProcess,Hole,Segment,EmptyBlock;
}
class Node implements Comparable<Node> {
    N NodeState;        // Equals false if this Node represents a hole
    int     StartingAdd;       // Position in memory of first byte
    int     size;        // Size that node occupies
    int     FinishingAdd;
    String SegmentName; // only if it's a segment
    Node    next;

    // Constructor for generating a hole or old process in memory
    Node (int locn, int sz, Node nxt , N state) {
        NodeState      = state;
        StartingAdd     = locn;
        size         = sz;
        FinishingAdd = locn+sz-1;
        next         = nxt;
    }
    // Constructor for generating a segment in memory
    Node (int locn, int sz, Node nxt , N state,String name) {
        NodeState      = state;
        StartingAdd     = locn;
        size         = sz;
        FinishingAdd = locn+sz-1;
        SegmentName = name;
        next         = nxt;
    }
    public int compareTo(Node compareNode) {
        int compareQuantity = ((Node) compareNode).size;
        //ascending order
        return this.size - compareQuantity;
        //descending order
        //return compareQuantity - this.quantity;
    }
    public static Comparator<Node> NodeStartAddComparator = new Comparator<Node>() {

        public int compare(Node node1,Node node2) {

            //int StartAdd1 = node1.StartingAdd;
            //int StartAdd2 =  node2.StartingAdd;

            //ascending order
            return node1.StartingAdd-node2.StartingAdd;

            //descending order
            //return fruitName2.compareTo(fruitName1);
        }

    };
} // End Node class

//  Creates a linked-list of nodes to  memory segments and holes
class Memory {
    public  int MemorySize;  // Defines the total size for the memory
    Node Head;// Refers to first node in memory
    Node Tail;
    private static int tempSize;

    Memory (int size) {
        MemorySize = size;
        Node n = new Node (0, MemorySize,null,N.EmptyBlock);
        Head = Tail=n;
        tempSize=MemorySize;
    }

    public void  PutHoles(int startingAdd, int size)
    {
        if(size<=MemorySize && tempSize>=size ) {
            // Put Old process at first node if the hole doesn't starting from 0
            if(startingAdd!=0 &&Head.NodeState==N.EmptyBlock ) {
                Node hole2=new Node(0,startingAdd , null,N.OldProcess);
                Head=Tail=hole2;
                tempSize=tempSize- startingAdd;
            }
            Node hole1 = new Node(startingAdd, size, null, N.Hole);
            //Put hole in the first if it starting from 0
            if(Head.size==MemorySize && Head.NodeState==N.EmptyBlock) {
                Head = Tail=hole1;
                tempSize=tempSize-size;

            }
            else {
                if(Tail.FinishingAdd +1 != hole1.StartingAdd) {
                    Node hole3 = new Node(Tail.FinishingAdd + 1, hole1.StartingAdd - (Tail.FinishingAdd+1), null, N.OldProcess);
                    Tail.next = hole3;
                    Tail = Tail.next;
                    tempSize= tempSize - (hole3.size);
                    Tail.next = hole1;
                    Tail = Tail.next;
                    tempSize= tempSize -(size);
                }
                else {
                    Tail.next=hole1;
                    Tail=Tail.next;
                    tempSize=tempSize-size;
                }
            }
        }
    }
    // Put Old Process at Last if there's NOT Hole at the last
    public void PutlastNode() {
        if(Tail.next==null && Memory.tempSize>0) {
            Node hole4 = new Node(Tail.FinishingAdd+1 , MemorySize - (Tail.FinishingAdd+1), null, N.OldProcess);
            Tail.next = hole4;
            Tail = Tail.next;
        }
    }

   /* static void front(Node n){
        n.next = Head;
        Head = n;
    }
    static void insert(Node a, Node p){
        p.next = a.next;
        a.next = p;
    }*/

    public static boolean tryPlace(Node current, int NewSegSize,String name1)
    {
        // If we are not looking at a hole, or the hole is too small, abort.
        if (current.NodeState==N.Segment ||current.NodeState==N.OldProcess || current.size < NewSegSize)
            return false;
        int remainingSpace = current.size - NewSegSize;
        if (remainingSpace > 0) {
            // Create a new hole with the remaining space.
            Node remainingHole = new Node(current.StartingAdd + NewSegSize, remainingSpace, current.next, N.Hole);
            // current=new Node(current.StartingAdd,NewSegSize,remainingHole,N.Segment);
            current.size = NewSegSize;
            current.NodeState=N.Segment;
            current.SegmentName=name1;
            current.FinishingAdd=current.StartingAdd+NewSegSize-1;
            current.next = remainingHole;
            current.next.FinishingAdd=(current.StartingAdd + NewSegSize)+remainingSpace-1;
            //Tail = remainingHole;
        }
        else {
            //current=new Node(current.StartingAdd,NewSegSize,current.next,N.Segment);
            current.size = NewSegSize;
            current.NodeState=N.Segment;
            current.SegmentName=name1;
            current.FinishingAdd=current.StartingAdd+NewSegSize-1;
            //Tail=current;
        }
        return true;
    }

    public boolean FirstFit(int Size, String name) {
        Node current=Head;
        for(Node n=current; current!=null; current=current.next ) {
            if (tryPlace(current, Size,name)) {
                return true;
            }
        }
        return false;
    }

    public boolean BestFit(int Size, String name) {
        Node current=Head;
        for(Node n=current; current!=null; current=current.next ) {
            if (tryPlace(current, Size,name)) {
                return true;
            }
        }
        return false;
    }



    public  boolean isEmpty() {
        if (Head.size==MemorySize && Head.NodeState==N.EmptyBlock) {
            return true;
        }
        return false;
    }
} // End Memory class



public class MemAlloc {
    public static Memory SortingAsc(Memory unS, Memory SortedMemory)
    {
        List<Node> SortedMemo = new ArrayList<Node>();
        for(Node n=unS.Head; n!=null; n=n.next) {
            if (n.NodeState != N.Segment) {
                Node n1 = new Node(n.StartingAdd, n.size, null, n.NodeState);
                SortedMemo.add(n1);
            } else {
                Node n1 = new Node(n.StartingAdd, n.size, null, n.NodeState, n.SegmentName);
                SortedMemo.add(n1);
            }
        }
        Collections.sort(SortedMemo);
        for(int i=0; i<SortedMemo.size(); i++) {
            if(i==0)
                SortedMemory.Head=SortedMemory.Tail=SortedMemo.get(i);
            else {
                SortedMemory.Tail.next=SortedMemo.get(i);
                SortedMemory.Tail=SortedMemory.Tail.next;
            }
        }
        return SortedMemory;
    }
    public static Memory SortingAscStartAdd(Memory unS, Memory SortedMemory)
    {
        List<Node> SortedMemo = new ArrayList<Node>();
        for(Node n=unS.Head; n!=null; n=n.next) {
            if (n.NodeState != N.Segment) {
                Node n1 = new Node(n.StartingAdd, n.size, null, n.NodeState);
                SortedMemo.add(n1);
            } else {
                Node n1 = new Node(n.StartingAdd, n.size, null, n.NodeState, n.SegmentName);
                SortedMemo.add(n1);
            }
        }
        Collections.sort(SortedMemo, Node.NodeStartAddComparator);
        for(int i=0; i<SortedMemo.size(); i++) {
            if(i==0)
                SortedMemory.Head=SortedMemory.Tail=SortedMemo.get(i);
            else {
                SortedMemory.Tail.next=SortedMemo.get(i);
                SortedMemory.Tail=SortedMemory.Tail.next;
            }
        }
        return SortedMemory;
    }


    public static void main(String[] args)
    {

        Scanner sc = new Scanner(System.in);
        System.out.println("Enter Total Memory Size:");
        int TotalMemSize=sc.nextInt();
        Memory UnSortedMemory=new Memory(TotalMemSize);
        System.out.println("Holes Number:");
        int HolesNum=sc.nextInt();
        if(HolesNum==0)
            UnSortedMemory.Head.NodeState=N.OldProcess;
        else {
            for(int h=0; h<HolesNum; h++) {
                System.out.println("Hole Number:" + h);
                System.out.println("starting add:");
                int StartAdd = sc.nextInt();
                System.out.println("hole size:");
                int HoleSize = sc.nextInt();
                UnSortedMemory.PutHoles(StartAdd,HoleSize);
            }
            UnSortedMemory.PutlastNode();
        }



        List<Node> UnSortedMemo = new ArrayList<Node>();
        for(Node n=UnSortedMemory.Head; n!=null; n=n.next) {
            Node n1=new Node(n.StartingAdd,n.size, null,n.NodeState);
            UnSortedMemo.add(n1);
        }

        Memory SortedMemory = new Memory(TotalMemSize);
        SortingAsc(UnSortedMemory, SortedMemory);

        /*List<Node> SortedMemo = new ArrayList<Node>();
        for(Node n=UnSortedMemory.Head; n!=null; n=n.next) {
            Node n1=new Node(n.StartingAdd,n.size, null,n.NodeState);
            SortedMemo.add(n1);
        }
        Collections.sort(SortedMemo);
        Memory SortedMemory1 = new Memory(TotalMemSize);
        for(int i=0; i<SortedMemo.size(); i++) {
            if(i==0)
                SortedMemory1.Head=SortedMemory1.Tail=SortedMemo.get(i);
            else
            {
                SortedMemory1.Tail.next=SortedMemo.get(i);
                SortedMemory1.Tail=SortedMemory1.Tail.next;
            }
        }
*/
        System.out.println("Process number:");
        int ProcNumber = sc.nextInt();
        List<List<Node>> Processes = new ArrayList<List<Node>>(ProcNumber);
        for(int i = 0; i < ProcNumber; i++)  {
            Processes.add(new ArrayList<Node>());
        }
        int p=0;
        while(p<ProcNumber) {
            System.out.println("Enter Process:P:" + p);
            System.out.println("Segment number:");
            int SegNumber = sc.nextInt();
            int flag = 0;
            for (int s = 0; s < SegNumber; s++) {
                System.out.println("Segment : " + s);
                System.out.println("Segment name ");
                String SegName = sc.next();
                System.out.println("Segment size:");
                int SegSize = sc.nextInt();
                Node segNode = new Node(0, SegSize, null, N.Segment, SegName);
                Processes.get(p).add(segNode);


                if (SortedMemory.BestFit(SegSize, SegName)) {
                    flag++;
                    SortingAsc(SortedMemory,SortedMemory);
                }
            }
            p++;
            if (flag == SegNumber)
                System.out.println("Allocated");
            else
                System.out.println("Not Allocated");
        }

        Memory SortMemByStartAdd= new Memory(TotalMemSize);
        SortingAscStartAdd(SortedMemory,SortMemByStartAdd);
        for(Node n=SortMemByStartAdd.Head; n!= null ; n=n.next) {
                System.out.println(+n.StartingAdd);
                System.out.println(n.NodeState);
                System.out.println(n.SegmentName);
                System.out.println(+n.FinishingAdd);
            }


        //sc.close();
    } // End main
} // End MemAlloc class